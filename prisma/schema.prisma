// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Faculty {
  id          Int          @id @default(autoincrement())
  name        String
  slugifyName String       @unique
  departments Department[]

  @@index([id])
}

model Department {
  id              Int              @id @default(autoincrement())
  name            String
  slugifyName     String           @unique
  faculty         Faculty          @relation(fields: [facultyId], references: [id])
  facultyId       Int
  lessons         Lesson[]
  userDepartments UserDepartment[]

  @@index([id, facultyId])
}

model UserDepartment {
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])

  @@id([userId, departmentId])
  @@index([departmentId])
}

model Lesson {
  id           Int           @id @default(autoincrement())
  name         String
  credit       Int
  code         String        @unique
  grade        Int
  status       LessonStatus? @default(CLOSE)
  department   Department    @relation(fields: [departmentId], references: [id])
  departmentId Int
  userLessons  UserLesson[]

  @@index([id, departmentId])
}

model UserLesson {
  id        Int          @id @default(autoincrement())
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
  lessonId  Int
  lesson    Lesson       @relation(fields: [lessonId], references: [id])
  startYear DateTime
  endYear   DateTime
  season    Season
  result    LessonResult @default(NOTRESULT)
  average   Int          @default(0)
  exams     Exam[]

  @@index([lessonId])
  @@index([userId])
}

model Exam {
  id               Int        @id @default(autoincrement())
  userLessonId     Int
  UserLesson       UserLesson @relation(fields: [userLessonId], references: [id])
  type             ExamType
  score            Int
  announcementDate DateTime   @default(now())

  @@index([id])
  @@index([userLessonId])
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  firstName       String
  lastName        String
  role            Role
  status          UserStatus
  pwdHash         String
  pwdSalt         String
  userLessons     UserLesson[]
  userDepartments UserDepartment[]

  @@index([id])
  @@index([email])
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  GRADUATED
  LEFT
}

enum ExamType {
  MID
  PROJECT
  FINAL
  MAKEUP
}

enum LessonStatus {
  OPEN
  CLOSE
}

enum LessonResult {
  PASSED
  FAILED
  NOTRESULT
}

enum Season {
  AUTUMN
  SPRING
  SUMMER
}
