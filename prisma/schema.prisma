// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model faculties {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(50)
  slugifyName String        @db.VarChar(50)
  departments departments[]
}

model departments {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(50)
  slugifyName        String               @db.VarChar(50)
  facultyId          Int
  faculty            faculties            @relation(fields: [facultyId], references: [id])
  studentDepartments studentDepartments[]
  teacherDepartments teacherDepartments[]
  lessons            lessons[]
}

model lessons {
  id           Int         @id @default(autoincrement())
  name         String      @db.VarChar(50)
  slugifyName  String      @unique @db.VarChar(50)
  code         String      @db.VarChar(5)
  grade        Int
  departmentId Int
  department   departments @relation(fields: [departmentId], references: [id])

  classes classes[]
  @@unique([departmentId, slugifyName])
}

model users {
  id                 Int                  @id @default(autoincrement())
  firsName           String               @db.VarChar(50)
  lastName           String               @db.VarChar(50)
  email              String               @unique @db.VarChar(50)
  role               USER_ROLE
  pwdHash            String               @db.Text
  pwdSalt            String               @db.Text
  teacherField       teacherFields?
  studentFields      studentFields?
  studentDepartments studentDepartments[]
  teacherDepartments teacherDepartments[]
  classes            classes[]
  studentClasses     studentClasses[]
}

model teacherFields {
  qualification TEACHER_QUALIFICATION
  website       String                @unique @db.VarChar(50)
  teacherId     Int
  teacher       users                 @relation(fields: [teacherId], references: [id])

  @@id([teacherId])
}

model studentFields {
  status    STUDENT_STATUS
  grade     Int
  gno       Decimal
  studentId Int
  student   users          @relation(fields: [studentId], references: [id])

  @@id([studentId])
}

model studentDepartments {
  type         STUDENT_DEPARTMENT_TYPE
  studentId    Int
  student      users                   @relation(fields: [studentId], references: [id])
  departmentId Int
  department   departments             @relation(fields: [departmentId], references: [id])

  @@id([studentId, departmentId])
  @@unique([studentId, type])
}

model teacherDepartments {
  teacherId    Int
  teacher      users       @relation(fields: [teacherId], references: [id])
  departmentId Int
  department   departments @relation(fields: [departmentId], references: [id])

  @@id([teacherId, departmentId])
}

model classes {
  id             Int              @id @default(autoincrement())
  session        CLASS_SESSION
  year           String           @db.VarChar(9)
  status         CLASS_STATUS
  lessonId       Int
  lesson         lessons          @relation(fields: [lessonId], references: [id])
  teacherId      Int
  teacher        users            @relation(fields: [teacherId], references: [id])
  studentClasses studentClasses[]
}

model studentClasses {
  id        Int     @unique
  classId   Int
  class     classes @relation(fields: [classId], references: [id])
  studentId Int
  student   users   @relation(fields: [studentId], references: [id])
  exams     exams[]

  @@id([id, classId, studentId])
}

model exams {
  id             Int            @id @default(autoincrement())
  studentClassId Int
  studentClass   studentClasses @relation(fields: [studentClassId], references: [id])
  type           EXAM_TYPE
  score          Decimal

  @@unique([studentClassId, type])
}

enum USER_ROLE {
  ADMIN
  TEACHER
  STUDENT
}

enum TEACHER_QUALIFICATION {
  ASSISTANT
  LECTURER
  DOCENT
  PROF
}

enum STUDENT_STATUS {
  ACTIVE
  INACTIVE
  GRADUATED
  LEFT
}

enum STUDENT_DEPARTMENT_TYPE {
  MAJOR
  MINOR
  DOUBLE_MAJOR
}

enum CLASS_SESSION {
  AUTUMN
  SPRING
  SUMMER
}

enum CLASS_STATUS {
  OPENED
  CLOSED
}

enum EXAM_TYPE {
  MIDTERM
  FINAL
  MAKEUP
}
